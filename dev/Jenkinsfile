
// Jenkins job
// Add this Jenkinsfile in the same folder where you have Terraform scripts

// For all env variables available in jenkins http://13.233.174.118:8080/env-vars.html/

// CODE_CHANGES = getGitChanges() {
    // Return true in case of any changes in git code.
    // We don't need this basically as we can create hooks in git to trigger build on code changes
// }

pipeline {
    agent any  // Where to execute  Eg: node info...etc

    parameters {
        // Here are various types of parameters
        // We can use these parameters in any of the below stages
        string ( name: "VERSION", defaultValue = "1.0" , description: "This version is meant for production deployment")
        choice ( name: "VERSION", choices : ["1.0", "2.0", "3.0"], description: "Choices to be selected")
        booleanParam ( name: "prodBuild", defaultValue: true, description: "Production build")
    }

    tools {
        // Build tools can be configured here
        // The three tools supported by jenkins by default are are gradle, maven or jdk
        // If you need any other tools those need to be installed and configured in jenkins dashboard
        // You can see them in "Global tool configuration"

        // The name of the installation needs to be provided here
        maven 'Maven'
    }

    environment {
        // Define all the environment variables here
        PATH = "${PATH}/${getTerraformPath()}"
        NEW_VERSION = "1.0"
    }
              
    stages // This is where we define the steps to be executed
    {
        // stage('S3 bucket creation - dev')
        // {  
        //     steps # Executes commands on Jenkins server 
        //     {  
        //         script
        //         {
        //             sh "ansible-playbook ansible/s3-bucket.yml"
        //         }
        //     }  
        // }

        stage('build')
        {
            when {
                // If this boolean expression is true then only go further and execute steps section

                echo "New version is ${params.NEW_VERSION}"  // Here we should use double quotes alone
                expression {
                    // If prodBuild is true then only execute below steps
                    params.prodBuild == true
                }
            }
            steps
            {
                echo "Version being deployed is ${}"
            }
        }

        stage('terraform init and apply - dev')
        {
            when {
                // If this boolean expression is true then only go further and execute steps section
                expression {
                    // Only if branch name is master or dev then only the following steps will get executed
                    env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'dev'
                }
            }
            steps
            {
                sh returnStatus: true; script: 'terraform workspace new dev'
                sh "terraform init"
                // sh "ansible-playbook ../ansible/terraform.yml -e todoapp_env=dev"
            }
        }

        // stage('terraform init and apply - prod')
        // {
        //     steps
        //     {
        //         sh returnStatus: true; script: 'terraform workspace new prod'
        //         sh "terraform init"
        //         sh "ansible-playbook ansible/terraform.yml"
        //     }
        // }
    }
    post {
        // Execute something after all the stages are done
        aways {
            // Execute this code always i.e. irrespective of whether build is failed and successful
        }
        success {
            // Exceute this script if the build is successful
        }
        failure {
            // Execute this script if the build is failed
        }
    }
}

// This will return the path where terraform is installed
def setTerraformPath()
{
    def tfHome = tool name: ‘Terraform’
    env.PATH = "${tfHome}:${env.PATH}"
}
